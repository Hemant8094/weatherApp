{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Api","App","useState","query","setQuery","Date","toLocaleTimeString","time","setTime","weather","setWeather","newsWeather","setnewsWeather","CurrentWeather","navigator","geolocation","getCurrentPosition","position","lat","lon","coords","latitude","longitude","fetch","then","res","json","result","console","log","alert","useEffect","country","news","setInterval","className","main","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","name","sys","style","display","justifyContent","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Math","round","temp","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58932c8a.chunk.js","sourcesContent":["import React,{useState,useEffect} from \"react\";\nimport WarningIcon from '@material-ui/icons/Warning';\n\nconst Api  = {\n  key:\"e1461eecf79ff00c247b492b3126160c\",\n  base: 'https://api.openweathermap.org/data/2.5/',\n  NewsApiKey:\"309db41e077b4164a4456ec8c3d7bf68\",\n  NewsApiBase:\"https://newsapi.org/v2/top-headlines?country\"\n}\n\nfunction App() {\n\n  const [query,setQuery] = useState('')\n  const [time,setTime] = useState(new Date().toLocaleTimeString())\n  const [weather,setWeather] = useState({})\n  const [newsWeather,setnewsWeather] = useState({})\n\n    const changingBackground = ()=>{\n      if(typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Rain\"){\n          return \"App rainny\"\n      }\n      \n      else if(typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Clouds\") {\n        return \"App cloudy\"\n      } \n      else if(typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Clear\") {\n        return \"App sunny\"\n      } \n      else if(typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Haze\" || \n               typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Mist\") {\n        return \"App Haze\"\n      }\n      else if(typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Smoke\") {\n        return \"App smoke\"\n      }\n      else if(typeof weather.main !== \"undefined\"&& weather.weather[0].main ===\"Snow\") {\n        return \"App Snow\"\n      }\n      else{\n        return \"App\"\n      }\n      \n    }\n\n\n\n\n    const getWeatherData= (lat,lon)=>{\n      fetch(`${Api.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${Api.key}`)\n      .then(res=>res.json())\n      .then (result =>{\n\n        \n        setWeather(result)\n        console.log(result)\n      })\n    }\n    const getWeatherNews= (country)=>{\n      fetch(`${Api.NewsApiBase}=${country}&category=business&apiKey=${Api.NewsApiKey}`)\n      .then(res=>res.json())\n      .then(news=>setnewsWeather(news))\n      console.log(newsWeather)\n    }\n    const CurrentWeather = ()=>{\n\n      const success = (position)=>{\n        getWeatherData(position.coords.latitude,position.coords.longitude)\n      }\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(success);\n      }\n      else {\n        alert('Your browser does not support location tracking, or permission is denied.');\n      }\n    }\n    useEffect(()=>{\n      CurrentWeather()\n      getWeatherNews(\"IN\")\n      \n    },[])\n\n    useEffect(()=>{\n      setInterval(()=>setTime(new Date().toLocaleTimeString()) ,1000)\n    },[time])\n    const search = evt => {\n      if(evt.key === \"Enter\"){\n        fetch(`${Api.base}weather?q=${query}&units=metric&APPID=${Api.key}`)\n        .then(res => res.json())\n        .then(result =>{\n\n          setQuery('');\n          setWeather(result)\n          console.log(result)\n        })\n      }\n    }\n\n    const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n  \n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={changingBackground()}>\n     <main>\n        <div className = \"search-box\">\n         <input\n          className = \"search-bar\"\n          type = \"text\"\n          placeholder= \"Search...\"\n          onChange = {e => setQuery(e.target.value)}\n          value  = {query}\n          onKeyPress = {search}\n         />\n        </div>\n        {(typeof weather.main !== \"undefined\")?\n        <div>\n\n          <div className = \"location-box\">\n              <div className = \"location\">{weather.name}, {weather.sys.country} </div>\n              <div style = {{display:\"flex\",justifyContent:\"center\"}}>\n                <div className = \"date-box\">\n                  <div className = \"Date\">{dateBuilder(new Date())}</div>\n                  <div className = \"Date\">{time}</div>\n                </div>\n              </div>\n\n          </div>\n          <div className =\"weather-box\">\n            <div className = \"temp\">  {Math.round(weather.main.temp)}Â°C</div>\n            <div className = \"weather-type\">{weather.weather[0].main}</div>\n          </div>\n        </div>:\n        <div className = \"error-box\">\n          <WarningIcon style={{width:\"75px\",height:\"75px\"}} /><div> Something Went Wrong</div>\n          <p>Please, check your internet connection <br></br>Or<br></br>  Enter valid city name </p>\n           \n          </div>\n      }\n     </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}